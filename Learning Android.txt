надо прописать план как я вижу то за что получу бабла


Андроид. Учимся.


Тем временем вопросы и заметки по Kotlin.
По умолчанию все классы в Котлине - финализированные. Наследоваться нельзя. Чтобы можно было наследоваться от класса, надо написать open перед объявлением класса. В основном приложении так сделано с классом StatelessUITest.

https://developer.android.com/courses/android-basics-kotlin/android-basics-kotlin-vocab - словарик терминов в андроиде.

Views
TextView
ViewGroups


!!!!! 2. Урок "Set up your happy birthday app" !!!!!

Все элементы что мы видим на экране это View. Не совсем понятно , что это, класс View или такое просто обозначение?
пока что примерно понимаю так: вью это класс-родитель. От него наследуются остальные. но не видел этого точно.
Вопрос. Как найти класс View в проекте? особенно если это пустой проект. так то это ж базовые предоставляемый андроидом класс. сходу найти не могу, хотя вообще в проекте Документов находил.
Вопрос. Не могу получить доступ к гитлабу и всему такому, хотя впн подключен и джира работает, хотя без впн не работало бы.
Наблюдение: вьюхи не висят просто сами по себе. Они имеют взаимосвязь с другими Вьюхами. ViewGroups отвечают за группировку вьюх. Один из представлений(?) ViewGroups является ConstraintLayout. Позволяет как то располагать вьюхи на экране.
Наблюдение. Есть известный нам и примерно понятный Layout Inspector, а есть Layout Editor. Это как раз для редактирования экранов. Пока не разобрался.
	Помимо окна Project, которое слева и нам давно знакомо, есть еще 2 больших окна в центре. 
	Слева это вид Дизайна (design View, уточнить как называется по-русски). Тут видно как окно будет выглядеть когда запустится.
	Справа это Чертеж или План (Blueprint). Тут будем создавать экран. Тут все проектируется, судя по всему.
	А еще левее есть окошко "Палитра" (Palette) - тут перечислены те вьюхи, которые мы можем вставлять в наш экран.
	Ниже палитры расположена зона Дерева Компонентов. Тут, судя по всему, описано дерево компонентов. Иерархия того, что у нас в приложухе уже есть.
	А вообще совсем справа расположено окно Атрибутов. Тут свойства вьюх. Что то подобное есть в Layout Inspector.
	
В окне Project есть такие папки:
App - тут почти все файлы, которые связаны с приложением
res - папка с ресурсами. Картинки, верстка экранов, может быть текста и все такое. Все наполнение приложения.
	В res есть папка Layout - тут всякие верстки. Что это такое - пока что не понятно.

Вопрос. ConstraintLayout - что это такое? зачем оно надо? Пока что видно что это что то типа хранилища для других объектов или типа того.
Вопрос. "The TextView is indented because it is inside the ConstraintLayout." - что это значит?
Вопрос. И все таки. Какого черта бывает так что в дереве компонентов у элемента есть текст, а в Laout Inspector этого текста нету?

!!!!! 3. Урок "Add TextViews to the layout". !!!!!


По уроку мы снесли имеющийся TextView, а после этого добавили новый. Но когда добавили, появился ворнинг типа " у нового элемента не заданы constraints. Типа нужна какие то ограничения, иначе когда будет запущено приложение, расположение нашего нового элемента изменится. Почему? Да хер его знает.
Короче надо внедрить ограничения по расположению с 2 сторон. Варианты: Сверху слева, сверху справа, снизу слева, снизу справа. Есть еще вариант давать зависимости о расположению относительно элемента. Пока не в курсе.
Добавляем шрифт, размер теста, цвет.
Идем в Атрибуты, там вкладка Common atributes. В ней textAppearance. Разворачиваем. 
textSize. Указываем как 36sp. sp - обязательно. Это как единица измерения, без нее будет ругаться и говорить что без sp это неизвестный юнит.
Важно. Есть dp и sp.
dp - density-independent pixels which you used earlier for the layout, 
sp- scalable pixels
По идее это одно и тоже, но есть какая-то разница.
Вопрос. Какая ризница между sp и dp?
fontFamily это типа вид шрифта. Курсив, обычный, почерк и все такое. casual это как почерк. Ну почти.
Вопрос. Что подразумевается под Solution Code ? Там что то связанное с тем когда твой код был загружен на гитхаб. уточнить бы.
А еще можно вставить какой то объект (щас речь о картинке) и отцентровать его. Для этого надо в окне констрейтов выставить все 4 ограничения со значением 0.
А что бы растянуть картинку на весь экран надо: в атрибутах ищем scaleType и его выставляем как centerCrop. И все. Растянется красиво. Там вообще много вариантов что можно делать с текстуринами.
Но теперь у нас пропал текст. Чтоб он появился, надо изображение поставить ЗА текст. Как сделать: в дереве компонентов растащи элементы от менее приоритетных по видимости к более приоритетным. Чем выше элемент, тем ниже его приоритет.
Далее. Вставлять текст в виде хардкодной стринги это херовая практика. Хорошей практикой будет подтягивать стрингу как ресурс. Так и надежней, и лучше для единения одинаковых стрингов в разных местах, а еще упрощает перевод на разные локали.
Как это сделать: надо вызвать диалог Extract Resource. Либо это можно сделать из подсказки на ворнинге о хардкодном тексте, либо провалиться в xml где расположена хардкодная стринга, по ней тап правой мышью, и там будет экстракт текст. Дальше диалоговое окно все подскажи и поможет.
Вопрос. В каком случае стринги раскидывают по разным файлам? Подозреваю что на разных экранах разных стрингофайлы.

!!!!! 4. Урок Создание кнопки в приложении. (переименуй потом как надо) !!!!!
Будем делать приложуху где мы по нажатию кнопки будем типа кидать игровой кубик с 6 гранями.
Для этого нас шлют в песочницу и говорят что мол напишем код где будет рандомайзер.
fun main() {
    val diceRange = 1..6
    val randomNumber = diceRange.random()
    println("random number: $randomNumber")
}

Потом нам показывают как создавать объекты. 

fun main() {
    val myFirstDice = Dice()
    println(myFirstDice.sides)
}

class Dice {
    var sides = 6
}

тесты для редактора пометь что их делать надо в основном проекте. для этого надо отсортировать все стори как раньше было оговорено. по тэгам, скорей всего.


Что бы импортировать медиа (например, картинки), надо открыть View -> Tool Windows -> Resource manager -> в открывшемся ресурс менеджере кликнуть на плюсик (прям под заголовком ресурс менеджера) и выбрать "импорт драваблес". Дальше просто через проводник выбираем нужную медию.

Текстовые ресурсы. Не хардкодь. Это прям плохо. Создав объект с текстом, обязательно найди его в xml'ине и сделай extract resources.

Активити. Типа это окно, в котором наше приложение отрисовывает пользовательский интерфейс. В приложении может быть одно активити или несколько. Вроде как я слышал что раньше было модно делать много активитей, а щас стараются придерживаться практики "одно активити на всю приложуху".

Для чего нужна активити? Знаю что для: 
- для отрисовки объектов (вьюх) на экране
- Для описания правил взаимодействия юзера с интерфейсом (очень абстрактно описано, конечно)
(кстати интересно как взаимосвязаны активити с композом)

Еще интересно было бы узнать о том что могут быть приложения с одной активити, а могут быть с несколькими. Кажется что современная практика (модная) это одна активити на всю приложуху. Но это не точно. МО вон на нескольких активити работает и ничего.

Логирование.

Log.e() - ошибки. Самый ахтунг.
Log.w() - ворнинги. 
Log.i() - информационные сообщения
Log.d() - отладочное
Log.v() - Тут содержатся все вышеописанные.

Все они однотипны по параметрам. У них их 2: тэг и сообщение. Тэг - опознавательный знак. Может быть, имя класса. Сообщение - что ты хотел сказать. Ну, например, сообщить что если эта строка залогировалась, то этот блок кода все таки был вызван. А еще можно туда запихать строковое представление значения какой-нибудь важной переменной.

Какая капитальная разница между crash и Exception? 
и что такое fatal ecxeption? 
А еще википедии пишут что есть Fatal Error и System fatal error. Што.

Спросить разработчиков как они читают стектрейс. Я то читаю сухую короткую выжимку, которая говорит мне какая цепочка методов в тестах посыпалась, а там же десятки строк. Очень много. Это надо хоть немного?

Поговорил с Артемом. Короче проходить этот курс до конца - дурка. Лучше тогда взять да написать для начала калькулятор(поработать с кнопками, внутренней логикой обработки событий, внешним видом кнопок). Потом сделать конвертер(дернуть апишку). Можно еще что то со звуком поделать.

Построение кнопок в рамках constraint'ов через chain. Между всеми кнопками должны быть взаимные зависимости по расположению на экране.
Нам тут подсказывают что строить UI следует не через UI'ные инструменты студии, а через xml'ки. Нормальная тема.

как внятно логировать?  Log.d("myTag", "This is my message"); вот это надо будет проверить. Таким образом можно распечатать метку типа когда хочется проверить что вот такой то блок кода в реальности был выполнен. А если я хочу печатать в логи что-то из кода? значение какое то или типа того?

